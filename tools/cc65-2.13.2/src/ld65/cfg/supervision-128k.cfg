# supervision 1284kbyte cartridge with bankswitching
# for assembler

# ld65 config file
# ld65 --config supervision.cfg -o <prog>.bin <prog>.o

MEMORY {
    RAM:      start = $0000, size = $2000;
    VRAM:     start = $4000, size = $2000;
    BANKROM1: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM2: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM3: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM4: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM5: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM6: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    BANKROM7: start = $8000, size = $4000, fill = yes, fillval = $FF, file = %O;
    ROM:      start = $c000, size = $4000, fill = yes, fillval = $FF, file = %O;
}

SEGMENTS {
    LOWCODE:  load = ROM,      type = ro,                optional = yes;
    INIT:     load = ROM,      type = ro,  define = yes, optional = yes;
    CODE:     load = ROM,      type = ro;
    BANK1:    load = BANKROM1, type = ro;
    BANK2:    load = BANKROM2, type = ro;
    BANK3:    load = BANKROM3, type = ro;
    BANK4:    load = BANKROM4, type = ro;
    BANK5:    load = BANKROM5, type = ro;
    BANK6:    load = BANKROM6, type = ro;
    BANK7:    load = BANKROM7, type = ro;
    ZEROPAGE: load = RAM,      type = bss, define = yes;
    DATA:     load = RAM,      type = bss, offset = $0200, define = yes;
    BSS:      load = RAM,      type = bss, define = yes;
    HEAP:     load = RAM,      type = bss, optional = yes; # must sit just below stack
    VECTOR:   load = ROM,      type = ro,  offset = $3FFA;
}
