# fill=yes forces area to be padded to specified size in output
MEMORY {
	ZP:     start =    $0, size = $100, type = rw;
	RAM:    start = $0200, size = $600;
	
	ROM0:    start = $008000, size = $7FC0, fill = yes;
	HEADER:  start =    $0, size =   $20, fill = yes;
	VECTORS: start = $FFE0, size =   $20, fill = yes;

        ROM1:    start = $018000, size = $8000, fill = yes;
        ROM2:    start = $028000, size = $8000, fill = yes;
        ROM3:    start = $038000, size = $8000, fill = yes;
        ROM4:    start = $048000, size = $8000, fill = yes;
        ROM5:    start = $058000, size = $8000, fill = yes;
        ROM6:    start = $068000, size = $8000, fill = yes;
        ROM7:    start = $078000, size = $8000, fill = yes;
}

# align=$100 allows use of .align directive with a value up to $100
SEGMENTS {
	ZEROPAGE: load = ZP,     type = zp;
	BSS:      load = RAM,    type = bss;
	
	BANK0:	  load = ROM0,    type = ro, align = $100;

	RODATA:	  load = ROM0,    type = ro;
	HEADER:	  load = HEADER, type = ro;
	VECTORS:  load = VECTORS,type = ro;

        # put libs in bank1
        STDLIB:   load = ROM1, type = ro, align = $100;

        BANK2:    load = ROM2, type = ro, align = $100;
        BANK3:    load = ROM3, type = ro, align = $100;
        BANK4:    load = ROM4, type = ro, align = $100;
        BANK5:    load = ROM5, type = ro, align = $100;
        BANK6:    load = ROM6, type = ro, align = $100;
        BANK7:    load = ROM7, type = ro, align = $100;
}
